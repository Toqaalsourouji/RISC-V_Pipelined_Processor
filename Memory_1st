module Memory( input clk, MemRead, MemWrite, input [1:0] memOffset, input unsignedflag, input [31:0] addr, input [31:0] data_in,
output reg [31:0] data_out);


reg [7:0] mem[(4*1024-1):0];

always @(*) begin
    if(MemRead) begin
        if(memOffset == 2'b11) begin
            data_out[7:0] = mem[addr+3];
            data_out[15:8] = mem[addr+2];
            data_out[23:16] = mem[addr+1];
            data_out[31:24] = mem[addr];
        end
        else if(memOffset == 2'b10) begin
            data_out[7:0] = mem[addr+3];
            data_out[15:8] = mem[addr+2];
            if(unsignedFlag) data_out[31:16] = 16'b0;
            else data_out[31:16] = {16{data_out[15]}};
        end
        else if(memOffset == 2'b01) begin
            data_out[7:0] = mem[addr+3];
            if(unsignedFlag) data_out[31:8] = 24'b0;
            else data_out[31:8] = {24{data_out[7]}};
        end
        end 
        else data_out=0; 
    end

    always@(posedge clk )begin
    
        if(MemWrite) begin
             if(memOffset == 2'b11) begin
                 mem[addr+3] = data_in[7:0];
                 mem[addr+2] = data_in[15:8];
                 mem[addr+1] = data_in[23:16];
                 mem[addr] = data_in[31:24];
             end
             
             else if(memOffset == 1'b10) begin
                 mem[addr+3] = data_in[7:0];
                 mem[addr+2] = data_in[15:8];
             end
             
             else if(memOffset == 2'b01) begin
                 mem[addr+3] = data_in[7:0];
             end
         end
 end

initial begin 

end

endmodule
